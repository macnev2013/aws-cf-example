Parameters:

  ClientIP:
    Description: "The IP address range that can be used to connect to the RDS instances from your local machine. It must be a valid IP CIDR range of the form x.x.x.x/x. Pls get your address using checkip.amazonaws.com or whatsmyip.org"
    Type: String
    Default: "0.0.0.0/0"
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "It must be a valid IP CIDR range of the form x.x.x.x/x. Suggest to enable access to your IP address only. Pls get your address using checkip.amazonaws.com or whatsmyip.org."

  ExistsDMSVPCRole:
    Default: "N"
    Description: "If the dms-vpc-role exists in your account, please enter Y, else enter N"
    Type: "String"
    MinLength: "1"
    MaxLength: "1"
    AllowedPattern : "[YN]"
    ConstraintDescription : "Permitted value is Y or N."

  ExistsDMSCloudwatchRole:
    Default: "N"
    Description: "If the dms-cloudwatch-logs-role exists in your account, please enter Y, else enter N"
    Type: "String"
    MinLength: "1"
    MaxLength: "1"
    AllowedPattern : "[YN]"
    ConstraintDescription : "Permitted value is Y or N."

  RDSAdminPassword:
    NoEcho: true
    Type: "String"
    Description: "Admin Password for MySQL"
    MinLength: 8
    MaxLength: 20

Conditions:

  NotExistsDMSVPCRole: !Equals
    - !Ref ExistsDMSVPCRole
    - "N"

  NotExistsDMSCloudwatchRole: !Equals
    - !Ref ExistsDMSCloudwatchRole
    - "N"

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Ref AWS::StackName

  SubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Select 
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: "10.0.0.0/26"
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Ref AWS::StackName

  SubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Select 
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: "10.0.0.64/26"
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Ref AWS::StackName
    DependsOn:
      - VPC

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"
    DependsOn:
      - InternetGateway

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Ref AWS::StackName

  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref "RouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
    DependsOn:
      - VPCGatewayAttachment

  SubnetARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
    DependsOn:
      - RouteTable
      - SubnetA

  SubnetBRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB
    DependsOn:
      - RouteTable
      - SubnetB

  SubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: "dbsubnetgroup"
      DBSubnetGroupDescription: "Subnet Group for db"
      SubnetIds:
      - !Ref "SubnetA"
      - !Ref "SubnetB"
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Ref AWS::StackName
    DependsOn:
      - SubnetA
      - SubnetB

  RDSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "rdssg"
      GroupDescription: "RDS traffic"
      VpcId: !Ref "VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: !Ref ClientIP
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 10.0.0.0/24
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Ref AWS::StackName
    DependsOn:
      - VPC

  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Enable bin log
      Family: mysql8.0
      Parameters:
        binlog_format: ROW
        binlog_checksum: NONE
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Ref AWS::StackName


  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: "db.t3.small"
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      DBInstanceIdentifier: test-cnf-rds
      DBName: testcnf
      DBSubnetGroupName: !Ref "SubnetGroup"
      Engine: mysql
      MasterUsername: admin
      MasterUserPassword: !Ref "RDSAdminPassword"
      DBParameterGroupName: !Ref RDSParameterGroup
      MultiAZ: false
      PubliclyAccessible: true
      StorageEncrypted: false
      VPCSecurityGroups:
        - !Ref "RDSSecurityGroup"
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Ref AWS::StackName
    DependsOn:
      - SubnetGroup
      - InternetGateway
      - RDSSecurityGroup
      - InternetRoute
      - RDSParameterGroup

#### IAM roles
  DMSCloudwatchRole:
    Type: AWS::IAM::Role
    Condition: NotExistsDMSCloudwatchRole
    Properties:
      RoleName: dms-cloudwatch-logs-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - dms.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonDMSCloudWatchLogsRole
      Path: /

  DMSVpcRole:
    Type: AWS::IAM::Role
    Condition: NotExistsDMSVPCRole
    Properties:
      RoleName: dms-vpc-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - dms.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole
      Path: /

  KinesisTargetDMSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: dms-kinesis-target-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - dms.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: KinesisAccessForDMSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                Resource:
                  - Fn::GetAtt: ["KinesisStream", "Arn"]
                  - Fn::Join:
                    - ''
                    - - Fn::GetAtt: ["KinesisStream", "Arn"]
                      - /*
    DependsOn:
      - KinesisStream

#### kinesis
  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: test-cnf-kinesis-stream
      ShardCount: 1
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Ref AWS::StackName

# #### dms
  DMSReplicationSubnetGroup:
    Type: AWS::DMS::ReplicationSubnetGroup
    Properties:
      ReplicationSubnetGroupDescription: Subnets available for DMS
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Ref AWS::StackName
    DependsOn:
      - SubnetA
      - SubnetB

  DMSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for DMS Instance
      GroupName: DMS Demo Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref ClientIP
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 10.0.0.0/24
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Ref AWS::StackName
    DependsOn:
      - VPC

  ReplicationInstance:
    Type: AWS::DMS::ReplicationInstance
    Properties: 
      AvailabilityZone: !GetAtt "SubnetA.AvailabilityZone"
      MultiAZ: false
      PubliclyAccessible: true
      ReplicationInstanceClass: dms.t2.small
      ReplicationInstanceIdentifier: "test-cnf-rep-inst"
      ReplicationSubnetGroupIdentifier: !Ref DMSReplicationSubnetGroup
      VpcSecurityGroupIds: !Ref: DMSSecurityGroup
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: !Ref AWS::StackName
      VpcSecurityGroupIds: 
        - !Ref "DMSSecurityGroup"
    DependsOn:
      - DMSReplicationSubnetGroup
      - DMSSecurityGroup
      - VPC
      - InternetGateway
      - InternetRoute

  RDSEndpointSource:
    Type: AWS::DMS::Endpoint
    Properties:
      EndpointType: source
      EngineName: mysql
      Username: admin
      Password: !Ref "RDSAdminPassword"
      ServerName: !GetAtt "RDSDBInstance.Endpoint.Address"
      Port: 3306
    DependsOn:
      - RDSDBInstance

  KinesisEndpointTarget:
    Type: AWS::DMS::Endpoint
    Properties:
      EndpointType: target
      EngineName: kinesis
      KinesisSettings:
        MessageFormat: json
        StreamArn: !GetAtt "KinesisStream.Arn"
        ServiceAccessRoleArn: !GetAtt "KinesisTargetDMSRole.Arn"
    DependsOn:
      - KinesisStream

  DMSReplicationTask:
    Type: AWS::DMS::ReplicationTask
    Properties:
      MigrationType: full-load
      ReplicationInstanceArn: !Ref ReplicationInstance
      SourceEndpointArn: !Ref RDSEndpointSource
      TargetEndpointArn: !Ref KinesisEndpointTarget
      TableMappings: >-
        { "rules": [ { "rule-type" : "selection", "rule-id" : "1", "rule-name" :
        "1", "object-locator" : { "schema-name" : "testschema", "table-name" :
        "testtable" }, "rule-action" : "include" } ] }
    DependsOn:
      - ReplicationInstance
      - RDSEndpointSource
      - KinesisEndpointTarget